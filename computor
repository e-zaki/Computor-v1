#!/usr/bin/env python3
import re
import sys
from fractions import Fraction

def parse_term(term):
    """Parse a single term into (coefficient, power) with strict validation"""
    term = term.strip().replace(' ', '')
    
    # Handle empty term
    if not term:
        raise ValueError("Empty term")
    
    # Handle constants
    if not any(c in term for c in ['X', 'x']):
        return (Fraction(term), 0)
    
    # Validate term structure - no multiple '*' except for coefficient
    if term.count('*') > 1:
        raise ValueError(f"Invalid term format: '{term}' (multiple '*' operators)")
    
    # Handle terms with exponent
    if '^' in term:
        parts = term.split('^')
        if len(parts) != 2:
            raise ValueError(f"Invalid exponent in term: '{term}'")
        coeff_part, power_part = parts
        try:
            power = int(power_part)
        except ValueError:
            raise ValueError(f"Invalid exponent value: '{power_part}'")
        
        # Validate coefficient part
        if coeff_part.endswith(('*X', '*x')):
            coeff = coeff_part[:-2]
        elif coeff_part.endswith(('X', 'x')):
            coeff = coeff_part[:-1]
        else:
            raise ValueError(f"Missing variable in term: '{term}'")
    else:
        # Handle linear terms (power=1)
        power = 1
        if term.endswith(('*X', '*x')):
            coeff = term[:-2]
        elif term.endswith(('X', 'x')):
            coeff = term[:-1]
        else:
            raise ValueError(f"Missing variable in term: '{term}'")
    
    # Handle implicit coefficients
    if not coeff or coeff in ['+', '-']:
        coeff = coeff + '1'
    
    try:
        return (Fraction(coeff), power)
    except ValueError:
        raise ValueError(f"Invalid coefficient: '{coeff}'")

def parse_equation(equation):
    """Parse equation into left and right terms"""
    left, right = equation.split('=')
    
    def parse_side(side_str):
        terms = []
        current_term = ''
        for char in side_str.replace(' ', ''):
            if char in '+-' and current_term:
                terms.append(current_term)
                current_term = char
            else:
                current_term += char
        if current_term:
            terms.append(current_term)
            
        return [parse_term(term) for term in terms if term]
    
    return parse_side(left), parse_side(right)

def get_reduced_form(left_terms, right_terms):
    """Combine terms and return reduced form coefficients"""
    coeffs = {}
    
    # Process left side (positive)
    for coeff, power in left_terms:
        coeffs[power] = coeffs.get(power, Fraction(0)) + coeff
    
    # Process right side (negative)
    for coeff, power in right_terms:
        coeffs[power] = coeffs.get(power, Fraction(0)) - coeff
    
    # Get highest power
    max_power = max(coeffs.keys()) if coeffs else 0
    
    # Create list of coefficients from highest to lowest power
    return [coeffs.get(power, Fraction(0)) for power in range(max_power, -1, -1)]

def format_reduced(coeffs):
    """Format the reduced form as a string"""
    terms = []
    for i, coeff in enumerate(coeffs):
        power = len(coeffs) - 1 - i
        if coeff == 0:
            continue
        
        # Format coefficient
        if coeff.denominator == 1:
            coeff_str = str(coeff.numerator)
        else:
            coeff_str = f"{coeff.numerator}/{coeff.denominator}"
        
        # Determine sign
        if coeff > 0:
            sign = '+' if terms else ''
        else:
            sign = '-'
            coeff_str = coeff_str.lstrip('-')
        
        # Build term
        term_part = f"{sign} {coeff_str}" if terms else f"{sign}{coeff_str}"
        if power > 0:
            term_part += f"*X^{power}" if power > 1 else "*X"
        terms.append(term_part)
    
    equation = ' '.join(terms) if terms else "0"
    return equation + " = 0"

def main():
    if len(sys.argv) != 2:
        print("Usage: ./computor \"POLYNOMIAL_EQUATION\"")
        print("Example: ./computor \"-4X^2 + 5*X^0 + 6*X = 2/4 + 5X\"")
        sys.exit(1)
    
    equation = sys.argv[1]
    try:
        left_terms, right_terms = parse_equation(equation)
        reduced_coeffs = get_reduced_form(left_terms, right_terms)
        reduced_form = format_reduced(reduced_coeffs)
        
        print("Original equation:", equation)
        print("Reduced form:", reduced_form)
        print("Coefficients:", [str(c) for c in reduced_coeffs])
        
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()